(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{225:function(t,a,e){"use strict";e.r(a);var s=e(2),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"widget简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#widget简介"}},[t._v("#")]),t._v(" Widget简介")]),t._v(" "),e("h2",{attrs:{id:"_1、概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、概念"}},[t._v("#")]),t._v(" 1、概念")]),t._v(" "),e("p",[t._v("Flutter中几乎所有的对象都是一个widget，相比原生开发中的”控件“, widget表示的概念更广泛，不仅可表示UI元素，也可以表示一些功能性的组件。如：手势检测的"),e("code",[t._v("GestureDetector")]),t._v("widget、用于APP主题数据传递的"),e("code",[t._v("Theme")]),t._v("等等")]),t._v(" "),e("h2",{attrs:{id:"_2、widget和element"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、widget和element"}},[t._v("#")]),t._v(" 2、Widget和Element")]),t._v(" "),e("p",[t._v("在Flutter中，Widget的功能是“描述一个UI元素的配置数据”，也就是说，Widget其实并不是表示最终绘制在设备屏幕上的显示元素，而它只是描述元素的一个配置数据。")]),t._v(" "),e("p",[t._v("实际上，Flutter中真正代表屏幕上显示元素的类是Element，也就是Widget只是描述Element的配置数据 ==》 **Widget只是UI元素的一个配置数据，并且一个Widget可以对应多个Element。**因为同一个Widget对象可以被添加到UI树的不同部分。真正渲染时，UI树的每一个Element节点都会对应一个Widget对象。总结：")]),t._v(" "),e("ul",[e("li",[t._v("Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，真正的UI渲染树是由Element构成的；不过由于Element是通过Widget生成的，所以它们之间有对应关系，大多数场景，可以宽泛的认为Widget树就是指UI控件树或UI渲染树")]),t._v(" "),e("li",[t._v("一个Widget对象可以对应多个Element对象，很好理解。也就是根据同一份配置，可以创建多个实例")])]),t._v(" "),e("h2",{attrs:{id:"_3、widget主要接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、widget主要接口"}},[t._v("#")]),t._v(" 3、Widget主要接口")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@immutable")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiagnosticableTree")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Widget")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" Key key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@protected")]),t._v("\n  Element "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  String "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toStringShort")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$runtimeType'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$runtimeType-$key'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("debugFillProperties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DiagnosticPropertiesBuilder properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("debugFillProperties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultDiagnosticsTreeStyle "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiagnosticsTreeStyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" bool "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("canUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Widget oldWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Widget newWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runtimeType "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" newWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runtimeType\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" oldWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" newWidget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[t._v("widget类继承自DiagnosticableTree，DiagnosticableTree(诊断树)，主要作用是提供调试信息")]),t._v(" "),e("li",[t._v("Key: 这个key属性类似于React/Vue中的key，主要的作用是决定是否在下一次build时复用旧的Widget，决定的条件在"),e("code",[t._v("canUpdate()")]),t._v("方法中。")]),t._v(" "),e("li",[e("code",[t._v("createElement()")]),t._v("：前面说过“一个Widget可以对应多个Element”；在构建UI树时，会先调用此方法生成对应节点的Element对象。此方法是隐式调用，开发中基本不会调用到")]),t._v(" "),e("li",[e("code",[t._v("debugFillProperties(...)")]),t._v(" 复写父类的方法，主要是设置诊断树的一些特性。")]),t._v(" "),e("li",[e("code",[t._v("canUpdate(...)")]),t._v("是一个静态方法，它主要用于在Widget树重新"),e("code",[t._v("build")]),t._v("时复用旧的widget，其实具体来说，应该是：是否用新的Widget对象去更新旧UI树上所对应的"),e("code",[t._v("Element")]),t._v("对象的配置；通过其源码我们可以看到，只要"),e("code",[t._v("newWidget")]),t._v("与"),e("code",[t._v("oldWidget")]),t._v("的"),e("code",[t._v("runtimeType")]),t._v("和"),e("code",[t._v("key")]),t._v("同时相等时就会用"),e("code",[t._v("newWidget")]),t._v("去更新"),e("code",[t._v("Element")]),t._v("对象的配置，否则就会创建新的"),e("code",[t._v("Element")]),t._v("。")])]),t._v(" "),e("p",[t._v("Widget类本身是一个抽象类，其中最核心的就是定义了"),e("code",[t._v("createElement()")]),t._v("接口，在开发中。一般不直接继承Widget类来实现一个新组件，一般通过继承"),e("code",[t._v("StatelessWidget")]),t._v("和"),e("code",[t._v("StatefulWidget")]),t._v("实现")]),t._v(" "),e("h2",{attrs:{id:"_4、statelesswidget"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、statelesswidget"}},[t._v("#")]),t._v(" 4、StatelessWidget")]),t._v(" "),e("p",[t._v("StatelessWidget相对比较简单，继承自Widget类，重写了createElement()方法：")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  StatelessElement "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StatelessElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("StatelessElement间接继承自Element类，和StatelessElement相对应")]),t._v(" "),e("p",[t._v("StatelessWidget用于不需要维护状态的场景，通常在build方法中通过嵌套其他Widget类构建UI，在构件过程总会递归的构建其嵌套的Widget。")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatelessWidget")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加构造函数")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Echo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Key key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@required")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Colors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" String text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" Color backgroundColor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  Widget "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BuildContext context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Center")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Container")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" backgroundColor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("按照惯例，"),e("code",[t._v("widget")]),t._v("的构造函数参数应使用命名参数，命名参数中的必要参数要添加 @required 标注，这样有利于静态代码分析器进行检查，")]),t._v(" "),e("p",[t._v("在继承Widget时，第一个参数通常是Key, 另外如果Widget需要接收子Widget，那么child或children参数通常放最后，Widget熟悉尽可能被声明为final，防止意外改变")])]),t._v(" "),e("h3",{attrs:{id:"context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),e("p",[t._v("build方法有一个context参数 类型是BuildContext，表示当前Widget在Widget树中的上下文，每一个Widget都会对应一个Context对象(因为每一个Widget都是Widget树上的一个节点)。实际上，Context是当前Widget在Widget树中位置中执行相关操作的一个句柄，比如提供了从当前Widget开始向上遍历Widget树、按照Widget类型查找父级Widget的方法，下面是在子树中获取父级Widget的一个示例")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewRoute")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatelessWidget")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  Widget "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BuildContext context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// return Echo(text: "大家好",);')]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       appBar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AppBar")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是一个标题"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Container")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n         child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Builder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           Scaffold sc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ancestorWidgetOfExactType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Scaffold"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("appBar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("as")]),t._v(" AppBar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n")])])]),e("p",[t._v("![image-20191129122314214](/Users/xiaojun/Library/Application Support/typora-user-images/image-20191129122314214.png)")]),t._v(" "),e("h2",{attrs:{id:"_5、statefulwidget"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、statefulwidget"}},[t._v("#")]),t._v(" 5、StatefulWidget")]),t._v(" "),e("p",[t._v("和"),e("code",[t._v("StatelessWidget")]),t._v("一样，"),e("code",[t._v("StatefulWidget")]),t._v("也是继承自"),e("code",[t._v("Widget")]),t._v("类，并重写了"),e("code",[t._v("createElement()")]),t._v("方法，不同的是返回的"),e("code",[t._v("Element")]),t._v(" 对象并不相同；另外"),e("code",[t._v("StatefulWidget")]),t._v("类中添加了一个新的接口"),e("code",[t._v("createState()")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatefulWidget")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StatefulWidget")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Key key "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@override")]),t._v("\n  StatefulElement "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StatefulElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@protected")]),t._v("\n  State "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n")])])]),e("ul",[e("li",[e("code",[t._v("StatefulElement")]),t._v(" 间接继承自"),e("code",[t._v("Element")]),t._v("类，与StatefulWidget相对应")]),t._v(" "),e("li",[e("code",[t._v("StatefulElement")]),t._v("中可能会多次调用"),e("code",[t._v("createState()")]),t._v("来创建状态(State)对象")]),t._v(" "),e("li",[e("code",[t._v("createState()")]),t._v(" 用于创建和Stateful widget相关的状态，它在Stateful widget的生命周期中可能会被多次调用。例如，当一个Stateful widget同时插入到widget树的多个位置时，Flutter framework就会调用该方法为每一个位置生成一个独立的State实例，其实，本质上就是一个"),e("code",[t._v("StatefulElement")]),t._v("对应一个State实例")])]),t._v(" "),e("h2",{attrs:{id:"_6、state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、state"}},[t._v("#")]),t._v(" 6、State")]),t._v(" "),e("p",[t._v("一个StatefulWidget类会对应一个State类，State表示与其对应的StatefulWidget要维护的状态，State中的保存的状态信息可以：")]),t._v(" "),e("ol",[e("li",[t._v("在Widget构建时可以被同步读取")]),t._v(" "),e("li",[t._v("在Widget声明周期中可以被改变，当State被改变时，可以手动调用setState()方法通知Flutter状态发送改变，Flutter收到消息后，会重新调用build方法构建Widget树，从而达到更新UI的目的")])]),t._v(" "),e("p",[t._v("State中有两个常用的属性:")]),t._v(" "),e("ol",[e("li",[t._v("Widget： 表示与该State示例关联的Widget实例，由Flutter动态设置，但是这种关联并非永久的，因为在应用生命周期中，UI树的某一个节点的Widget实例在重新构建时可能会变化，但State实例只会在第一次插入到树中时被创建，当重新构建时，如果Widget被修改了，Flutter会动态设置State.widget为新的Widget实例")]),t._v(" "),e("li",[t._v("Context： StatefulWidget对应的BuildContext，作用同StatelessWidget的BuildContext")])]),t._v(" "),e("h2",{attrs:{id:"_7、state的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、state的生命周期"}},[t._v("#")]),t._v(" 7、State的生命周期")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("initState: 当Widget第一次插入到Widget树时会被调用，对于每一个State对象，Flutter只会调用一次该回调，所以，通常在该回调中做一些一次性操作，如状态初始化，订阅子树的事件通知等，不能在该回调中调用buildContext.inheritFromWidgetOfExactType(该方法用于在Widget树上获取离当前Widget最近的一个父级inheritFromWidget)，原因是在初始化完成后，Widget树中的inheritFromWidget也可能发生变化，正确做法应该是在build()方法或didchangeDependencies中调用它。")])]),t._v(" "),e("li",[e("p",[t._v("didChangeDependencies(): 当State对象的依赖发生变化时会被调用；例如：在之前"),e("code",[t._v("build()")]),t._v(" 中包含了一个"),e("code",[t._v("InheritedWidget")]),t._v("，然后在之后的"),e("code",[t._v("build()")]),t._v(" 中"),e("code",[t._v("InheritedWidget")]),t._v("发生了变化，那么此时"),e("code",[t._v("InheritedWidget")]),t._v("的子widget的"),e("code",[t._v("didChangeDependencies()")]),t._v("回调都会被调用。典型的场景是当系统语言Locale或应用主题改变时，Flutter framework会通知widget调用此回调。")])]),t._v(" "),e("li",[e("p",[t._v("build()： 此回调读者现在应该已经相当熟悉了，它主要是用于构建Widget子树的，会在如下场景被调用：")]),t._v(" "),e("ol",[e("li",[t._v("在调用initState()之后")]),t._v(" "),e("li",[t._v("在调用didUpdateWidget()之后")]),t._v(" "),e("li",[t._v("在调用setState()之后")]),t._v(" "),e("li",[t._v("在调用"),e("code",[t._v("didChangeDependencies()")]),t._v("之后。")]),t._v(" "),e("li",[t._v("在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("reassemble()")]),t._v("：此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，此回调在Release模式下永远不会被调用。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("didUpdateWidget()")]),t._v("：在widget重新构建时，Flutter framework会调用"),e("code",[t._v("Widget.canUpdate")]),t._v("来检测Widget树中同一位置的新旧节点，然后决定是否需要更新，如果"),e("code",[t._v("Widget.canUpdate")]),t._v("返回"),e("code",[t._v("true")]),t._v("则会调用此回调。正如之前所述，"),e("code",[t._v("Widget.canUpdate")]),t._v("会在新旧widget的key和runtimeType同时相等时会返回true，也就是说在在新旧widget的key和runtimeType同时相等时"),e("code",[t._v("didUpdateWidget()")]),t._v("就会被调用。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("deactivate()")]),t._v("：当State对象从树中被移除时，会调用此回调。在一些场景下，Flutter framework会将State对象重新插到树中，如包含此State对象的子树在树的一个位置移动到另一个位置时（可以通过GlobalKey来实现）。如果移除后没有重新插入到树中则紧接着会调用"),e("code",[t._v("dispose()")]),t._v("方法")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("dispose()")]),t._v("：当State对象从树中被永久移除时调用；通常在此回调中释放资源。")])])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意")]),t._v("：在继承"),e("code",[t._v("StatefulWidget")]),t._v("重写其方法时，对于包含"),e("code",[t._v("@mustCallSuper")]),t._v("标注的父类方法，都要在子类方法中先调用父类方法。")])]),t._v(" "),e("h2",{attrs:{id:"_8、在widget中获取state对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、在widget中获取state对象"}},[t._v("#")]),t._v(" 8、在Widget中获取State对象")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("通过Context获取")]),t._v(" "),e("p",[e("code",[t._v("context")]),t._v("对象有一个"),e("code",[t._v("ancestorStateOfType(TypeMatcher)")]),t._v("方法，该方法可以从当前节点沿着widget树向上查找指定类型的StatefulWidget对应的State对象。")])]),t._v(" "),e("li",[e("p",[t._v("通过GlobalKey")]),t._v(" "),e("p",[t._v("Flutter还有一种通用的获取"),e("code",[t._v("State")]),t._v("对象的方法——通过GlobalKey来获取！ 步骤分两步：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("给目标"),e("code",[t._v("StatefulWidget")]),t._v("添加"),e("code",[t._v("GlobalKey")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义一个globalKey, 由于GlobalKey要保持全局唯一性，我们使用静态变量存储")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" GlobalKey"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ScaffoldState"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" _globalKey"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GlobalKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" _globalKey "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置key")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("通过"),e("code",[t._v("GlobalKey")]),t._v("来获取"),e("code",[t._v("State")]),t._v("对象")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[t._v("_globalKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("openDrawer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：使用GlobalKey开销较大，如果有其他可选方案，应尽量避免使用它。另外同一个GlobalKey在整个widget树中必须是唯一的，不能重复。")])])])]),t._v(" "),e("h2",{attrs:{id:"_9、flutter-sdk内置组件库介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、flutter-sdk内置组件库介绍"}},[t._v("#")]),t._v(" 9、Flutter SDK内置组件库介绍")]),t._v(" "),e("p",[t._v("Flutter提供了一套丰富、强大的基础组件，在基础组件库之上Flutter又提供了一套Material风格（Android默认的视觉风格）和一套Cupertino风格（iOS视觉风格）的组件库。要使用基础组件库，需要先导入：")]),t._v(" "),e("div",{staticClass:"language-dart extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'package:flutter/widgets.dart'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n")])])]),e("h3",{attrs:{id:"基础组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础组件"}},[t._v("#")]),t._v(" 基础组件")]),t._v(" "),e("ul",[e("li",[t._v("Text： 该组件可让您创建一个带格式的文本。")]),t._v(" "),e("li",[t._v("Row、Column: 这些具有弹性空间的布局类Widget可让您在水平（Row）和垂直（Column）方向上创建灵活的布局。其设计是基于Web开发中的Flexbox布局模型")]),t._v(" "),e("li",[t._v("Stack: 取代线性布局 (译者语：和Android中的"),e("code",[t._v("FrameLayout")]),t._v("相似)，"),e("a",{attrs:{href:"https://docs.flutter.io/flutter/widgets/Stack-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Stack")]),e("OutboundLink")],1),t._v("允许子 widget 堆叠， 你可以使用 "),e("a",{attrs:{href:"https://docs.flutter.io/flutter/widgets/Positioned-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Positioned")]),e("OutboundLink")],1),t._v(" 来定位他们相对于"),e("code",[t._v("Stack")]),t._v("的上下左右四条边的位置。Stacks是基于Web开发中的绝对定位（absolute positioning )布局模型设计的")]),t._v(" "),e("li",[t._v("Container: "),e("a",{attrs:{href:"https://docs.flutter.io/flutter/widgets/Container-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Container")]),e("OutboundLink")],1),t._v(" 可让您创建矩形视觉元素。container 可以装饰一个"),e("a",{attrs:{href:"https://docs.flutter.io/flutter/painting/BoxDecoration-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("BoxDecoration")]),e("OutboundLink")],1),t._v(", 如 background、一个边框、或者一个阴影。 "),e("a",{attrs:{href:"https://docs.flutter.io/flutter/widgets/Container-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Container")]),e("OutboundLink")],1),t._v(" 也可以具有边距（margins）、填充(padding)和应用于其大小的约束(constraints)。另外， "),e("a",{attrs:{href:"https://docs.flutter.io/flutter/widgets/Container-class.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Container")]),e("OutboundLink")],1),t._v("可以使用矩阵在三维空间中对其进行变换")])]),t._v(" "),e("h4",{attrs:{id:"material组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#material组件"}},[t._v("#")]),t._v(" Material组件")]),t._v(" "),e("p",[t._v("如：Scaffold、AppBar、FlatButton")]),t._v(" "),e("h4",{attrs:{id:"cupertino组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cupertino组件"}},[t._v("#")]),t._v(" Cupertino组件")]),t._v(" "),e("p",[t._v("目前还没有Material 组件那么丰富")])])}),[],!1,null,null,null);a.default=n.exports}}]);